package com.kidscademy.quiz.instruments.model;

import java.util.List;

/**
 * Quiz engine generates challenges and check the answer. Also provides means to cancel current challenge
 * when user close quiz activity prematurely.
 *
 * @author Iulian Rotaru
 */
public interface QuizEngine {
    /**
     * Generate next challenge. A challenge has both the puzzle that need to be solved and options list,
     * from which user need to peek the right one.
     *
     * @return next challenge.
     */
    QuizChallenge nextChallenge();

    /**
     * Check if user selected options is the right one.
     *
     * @param option user selected option.
     * @return true if user selected option is the right one.
     */
    boolean checkAnswer(String option);

    /**
     * Cancel current challenge when user leaves quiz activity prematurely.
     */
    void cancelChallenge();

    /**
     * Get last response time in milliseconds. This method is about last answer and should be invoked after answer check,
     * see {@link #checkAnswer(String)}, otherwise response time is not computed and this method returns 0.
     *
     * @return last response time, in milliseconds or zero.
     */
    int getResponseTime();

    /**
     * This method returns the total number of challenges this quiz session has.
     *
     * @return total number of challenges current quiz session has.
     */
    int getTotalChallengesCount();

    /**
     * Return the number of challenges actually solved in current quiz session.
     *
     * @return number of solved challenges.
     */
    int getSolvedChallengesCount();

    /**
     * Get credits collected in current quiz session. Collected credits value is updated by {@link #checkAnswer(String)},
     * when answer is correct.
     *
     * @return collected credits.
     */
    int getCollectedCredits();

    /**
     * Get average response time for challenges already solved in current quiz session.
     *
     * @return average response time.
     */
    int getAverageResponseTime();

    /**
     * Get the number of errors still acceptable on current quiz session.
     *
     * @return left tries on current quiz session.
     */
    int getLeftTries();

    /**
     * Event listener for events generated by quiz engine. Current implementation fires only time related
     * events: progress event fired periodically and quiz timeout.
     * <p>
     * All events are triggered from non UI thread.
     *
     * @author Iulian Rotaru
     */
    interface Listener {
        /**
         * Invoked periodically by quiz engine to signal quiz challenge progress.
         *
         * @param progress normalized progress value in range [0..100].
         */
        void onQuizProgress(int progress);

        /**
         * There is no answer and quiz challenge ends in timeout.
         */
        void onQuizTimeout();
    }
}
